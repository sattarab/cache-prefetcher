#include <stdio.h>
int main (int argc, char *argv[ ])
{
	/* compiled using -O0 flag in the ssbig-na-sstrix-gcc mbq1.c -O0 -o mbq1*/
  

  int i, j, k;
  int a[100][100], b[100][100], c[100][100], d[100][100];

  /*   This microbenchmark verifies the open ended prefetcher by accessing the addresses in a common delta pattern. 
       So for this benchmark as the addresses are accessed in a constant delta pattern there will be only compulsory/cold
       misses.In the open ended prefetcher the delta chosen for PC is the delta that is the most common
       for that PC so the address fetched into the cache is address + common_delta if not already in the cache. The delta table
       for each enrty in the history tabe is a fifo table with the history table being the direct mapped table. The L1 Cache 
       used with this benchmark is 16 way with 64 sets and 64 bytes block size with lru replacement policy. 
       The associtivity is increased to decrease the conflict misses to almost 0 to verify the open ended prefetcher implementation.
  */

  /* Initialize the array */
  for (i = 0; i < 100; i++)
  {
    for (j = 0; j < 100; j++)
    {
      c[i][j] = 0;
      a[i][j] = 1;
      b[i][j] = 2;
      d[i][j] = 10;
    }
  }
  
  /* do the computation */
  for (i = 0; i < 100; i++)
  {
    for (j = 0; j < 100; j++)
    {
      for (k = 0; k < 100; k++)
      {
        c[i][j] += (a[i][k] * b[k][j]) + d[i][j];
      }
    }
  }

  return 0;
}
